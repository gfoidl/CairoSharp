// (c) gfoidl, all rights reserved

using System.Runtime.InteropServices;
using Cairo.Surfaces;
using Cairo.Surfaces.Images;
using Cairo.Surfaces.PDF;
using Cairo.Surfaces.PostScript;
using Cairo.Surfaces.Recording;
using Cairo.Surfaces.SVG;
using static Cairo.Extensions.Loading.Script.ScriptNative;

namespace Cairo.Extensions.Loading.Script;

/// <summary>
/// Extension methods for laoding a cairo script generated by <see cref="Surfaces.Recording.ScriptDevice"/>.
/// </summary>
public static unsafe class ScriptExtensions
{
    // The sequence is like this (given with pointer addresses from a debug session and for SVG type
    // CreateSvgSurface callback
    // closure = null
    // svg     = 0x0000029f59ae6170      ----+
    //                                       |
    // CreateContext callback                |
    // closure = null                        |
    // surface = 0x0000029f59ae6170      ----+
    // cr      = 0x0000029f59bb9e80          |  ----+
    //                                       |      |
    // takes some time                       |      |
    //                                       |      |
    // DestroySurface callback               |      |
    // closure = null                        |      |
    // ptr     = 0x0000029f59ae6170      ----+      |
    //                                              |
    // DestroyContext                               |
    // closure = null                               |
    // ptr     = 0x0000029f59bb9e80             ----+

    [ThreadStatic]
    private static cairo_surface_t* t_surface;

    [ThreadStatic]
    private static double t_width;

    [ThreadStatic]
    private static double t_height;

    extension(ScriptSurface)
    {
        /// <summary>
        /// Loads and interprets the script given by <paramref name="scriptFile"/> and renders it
        /// to a new <see cref="Surface"/> of type given by <paramref name="surfaceType"/>.
        /// </summary>
        /// <param name="scriptFile">the cairo script file</param>
        /// <param name="surfaceType">
        /// The type of surface to create. Only the following <see cref="SurfaceType"/>s are supported:
        /// <list type="bullet">
        /// <item><see cref="SurfaceType.Image"/></item>
        /// <item><see cref="SurfaceType.Pdf"/></item>
        /// <item><see cref="SurfaceType.PS"/></item>
        /// <item><see cref="SurfaceType.Svg"/></item>
        /// </list>
        /// </param>
        /// <param name="width">the width of the returned surface</param>
        /// <param name="height">the height of the returned surface</param>
        /// <returns>
        /// The new created <see cref="Surface"/>. Ownership is transferred, so <see cref="CairoObject.Dispose()"/>
        /// should be called when done using the surface.
        /// </returns>
        /// <exception cref="NotSupportedException"></exception>
        public static Surface CreateFromScript(string scriptFile, SurfaceType surfaceType, out double width, out double height)
        {
            ArgumentNullException.ThrowIfNull(scriptFile);

            cairo_script_interpreter_hooks_t hooks = new()
            {
                // the other hooks aren't needed, and are managed by the script interpreter
                surface_create = surfaceType switch
                {
                    SurfaceType.Image => &CreateImageSurface,
                    SurfaceType.Pdf   => &CreatePdfSurface,
                    SurfaceType.PS    => &CreatePostScriptSurface,
                    SurfaceType.Svg   => &CreateSvgSurface,
                    _                 => throw new NotSupportedException($"The surface type {surfaceType} is not supported by this operation"),
                }
            };

            uint line;
            Status status = Status.Success;

            cairo_script_interpreter_t* csi = cairo_script_interpreter_create();
            try
            {
                cairo_script_interpreter_install_hooks(csi, &hooks);
                status = cairo_script_interpreter_run(csi, scriptFile);
                line   = cairo_script_interpreter_get_line_number(csi);
            }
            finally
            {
                status |= cairo_script_interpreter_destroy(csi);
            }

            if (status != Status.Success)
            {
                throw new CairoException($"Error during replay of '{scriptFile}', line: {line}");
            }

            width  = t_width;
            height = t_height;
            return new Surface(t_surface);
        }
    }

    private static cairo_surface_t* CreatePdfSurface(void* closure, Content content, double width, double height, CLong uid)
    {
        cairo_surface_t* surface = PdfSurfaceNative.cairo_pdf_surface_create_for_stream(null, null, width, height);
        SurfaceNative.cairo_surface_reference(surface);

        t_width   = width;
        t_height  = height;
        t_surface = surface;
        return surface;
    }

    private static cairo_surface_t* CreatePostScriptSurface(void* closure, Content content, double width, double height, CLong uid)
    {
        cairo_surface_t* surface = PostScriptSurfaceNative.cairo_ps_surface_create_for_stream(null, null, width, height);
        SurfaceNative.cairo_surface_reference(surface);

        t_width   = width;
        t_height  = height;
        t_surface = surface;
        return surface;
    }

    private static cairo_surface_t* CreateSvgSurface(void* closure, Content content, double width, double height, CLong uid)
    {
        cairo_surface_t* surface = SvgSurfaceNative.cairo_svg_surface_create_for_stream(null, null, width, height);
        SurfaceNative.cairo_surface_reference(surface);

        t_width   = width;
        t_height  = height;
        t_surface = surface;
        return surface;
    }

    private static cairo_surface_t* CreateImageSurface(void* closure, Content content, double width, double height, CLong uid)
    {
        cairo_surface_t* surface = ImageSurfaceNative.cairo_image_surface_create(Format.Argb32, (int)width, (int)height);
        SurfaceNative.cairo_surface_reference(surface);

        t_width   = width;
        t_height  = height;
        t_surface = surface;
        return surface;
    }
}
